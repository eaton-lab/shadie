initialize() {
	defineConstant("dK", 1000); //diploid
	defineConstant("hK", 1000); //haploid
	defineConstant("Death_chance", 0.05);
	defineConstant("FtoM", 0.60); //female:male ratio
	defineConstant("Spore_num", 100); //number of spores per sporophyte
	defineConstant("Clone_rate", 0); //chance of cloning
	defineConstant("Clone_num", 1); //number of clones produced by cloning
	defineConstant("Self_rate", 0); //chance of intragametophytic selfing
	defineConstant("Maternal_weight", 0.7); //weighted average for maternal fitness effect
	
	initializeSLiMModelType('nonWF');
	initializeTreeSeq();
	initializeMutationType('m3', 0.1, 'g', -0.03, 0.2);
	m3.convertToSubstitution = T;
	initializeMutationType('m4', 0.8, 'e', 0.1);
	m4.convertToSubstitution = T;
	initializeGenomicElementType('g1', c(m3, m4),c(8, 0.1));
	initializeGenomicElementType('g3', c(m3),c(1));
	initializeGenomicElement(g1, 40001, 100000);
	initializeGenomicElement(g3, 140000, 175000);
	initializeRecombinationRate(1e-09, 199999);
	initializeMutationRate(1e-07);
	
	// sex: male == 0, female == 1
}

1 early(){
	sim.addSubpop('p1', dK); //diploid sporophytes
	sim.addSubpop('p0', 0); //haploid gametophytes
}

reproduction(p1) {	// creation of spores from sporophytes
	g_1 = genome1;
	g_2 = genome2;
	
	meiosis_reps = floor(Spore_num/2);
	for (rep in 1:meiosis_reps)
	{
		breaks = sim.chromosome.drawBreakpoints(individual);
		p0.addRecombinant(g_1, g_2, breaks, NULL, NULL, NULL).tag = ifelse (runif(1)<FtoM, 1, 0);
		p0.addRecombinant(g_2, g_1, breaks, NULL, NULL, NULL).tag = ifelse (runif(1)<FtoM, 1, 0);
	}

}


reproduction(p0) //creation of sporophyte from haploids
{
	if (individual.tag == 1)	// females find male gametes to reproduce
	{
		reproduction_opportunity_count = 1;
		
		// clones give the focal individual extra opportunities to reproduce
		if (runif(1) <= Clone_rate)
			reproduction_opportunity_count = reproduction_opportunity_count + Clone_num;
		
		for (repro in seqLen(reproduction_opportunity_count))
		{
			if (runif(1) <= Self_rate)
			{
				// this is selfing using two identical gametes â€“ intragametophytic selfing
				// intergametophytic selfing might happen below, by chance
				p1.addRecombinant(individual.genome1, NULL, NULL, individual.genome1, NULL, NULL);
			}
			else
			{
				sperm = p0.sampleIndividuals(1, tag=0);	// find a male!
				
				if (sperm.size() == 1)
				{
					child = p1.addRecombinant(individual.genome1, NULL, NULL, sperm.genome1, NULL, NULL);
					
					if (Maternal_weight > 0) //Mother's fitness affects sporophyte fitness; see survival()
						child.setValue("maternal_fitness", subpop.cachedFitness(individual.index));
					
					sperm.tag = 2;	// take out of the mating pool
				}
			}
		}
	}
}

early() //executes after offspring are generated
{
	if (sim.generation % 2 == 0) //diploids (p1) just generated gametophytes
	{
		//fitness affects gametophyte survival
		p0.fitnessScaling = (hK / p0.individualCount);
	
	}
	else //odd generations = gametophytes (p0) just generated sporophytes
		p1.fitnessScaling = dK / p1.individualCount; //fitness affects sporophytes
}

early()
{
	if (sim.generation % 2 == 0) //diploids (p1) just generated haploid gametophytes
	{
		//fitness affects gametophyte survival
		p0.fitnessScaling = (hK / p0.individualCount);
		
		// haploids get modified fitness, without dominance
		s1.active = 1;
		s2.active = 1;
		s3.active = 1;
		s4.active = 0;
		s5.active = 1;
		s6.active = 0;
	}
	else //odd generations = gametophytes (p0) just generated sporophytes
	{
		p1.fitnessScaling = dK / p1.individualCount; //fitness affects sporophytes
		// diploids get SLiM's standard fitness calculation, with dominance
		s1.active = 0;
		s2.active = 0;
		s3.active = 0;
		s4.active = 1;
		s5.active = 0;
		s6.active = 1;
	}
}

//this fitness callback needs to be repeated for EVERY MUTATION (except neutral ones)
s1 fitness(m3)
{
	return 1 + mut.selectionCoeff; //gametophytes have no dominance effects
}

s2 fitness(m4)
{
	return 1 + mut.selectionCoeff;
}

s3 survival(p1)
{
	return F;
}

s4 survival(p1)
{
	//this code implements random death chance
	if (runif(1) < Death_chance)
		return F;
	else
		return NULL;
	
	// maternal effect
	maternal_effect = individual.getValue("maternal_fitness");
	
	if (!isNULL(maternal_effect))
	{
		corrected_fitness = (maternal_effect * Maternal_weight) + fitness * (1 - Maternal_weight);
		return (draw < corrected_fitness);
	}
	
	return NULL;
}

s5 survival(p0) //even
{
	//this code implements random death chance
	if (runif(1) < Death_chance)
		return F;
	else
		return NULL;
}

s6 survival(p0) //odd
{
	return F;
}

late() {
	if (sim.generation % 2 == 0) //gametophytes have just undergone fitness selection
	{
		mut3 = sim.mutationsOfType(m3);
		freq3 = sim.mutationFrequencies(NULL, mut3);
		if (any(freq3 == 0.5))
			sim.subpopulations.genomes.removeMutations(mut3[freq3 == 0.5], T);
		
		mut4 = sim.mutationsOfType(m4);
		freq4 = sim.mutationFrequencies(NULL, mut4);
		if (any(freq4 == 0.5))
			sim.subpopulations.genomes.removeMutations(mut4[freq4 == 0.5], T);
	}
}

2000 late(){
	sim.treeSeqOutput('shadie.trees');
	sim.outputFixedMutations();
}
