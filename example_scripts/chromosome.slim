// This is an example of how to generate a random chromosome structure 
	// (introns and exonos interspersed by relatively large non-coding regions)

initialize() {
	initializeMutationRate(1e-7);
	
	initializeMutationType("m1", 0.5, "f", 0.0);         // non-coding
	initializeMutationType("m2", 0.5, "f", 0.0);         // synonymous
	initializeMutationType("m3", 0.1, "g", -0.03, 0.2);  // deleterious
	initializeMutationType("m4", 0.8, "e", 0.1);         // beneficial
	
	initializeGenomicElementType("g1", c(m2,m3,m4), c(2,8,0.1));  // exon
	initializeGenomicElementType("g2", c(m1,m3), c(9,1));       // intron
	initializeGenomicElementType("g3", c(m1), 1);           // non-coding
	
	// Generate random genes along an approximately 100000-base chromosome
	base = 0;
	
	while (base < 100000) {
		// make a non-coding region
		nc_length = rdunif(1, 100, 5000);
		initializeGenomicElement(g3, base, base + nc_length - 1);
		base = base + nc_length;
		
		// make first exon
		ex_length = asInteger(rlnorm(1, log(50), log(2))) + 1;
		initializeGenomicElement(g1, base, base + ex_length - 1);
		base = base + ex_length;
		
		// make additional intron-exon pairs
		do
		{
			in_length = asInteger(rlnorm(1, log(100), log(1.5))) + 10;
			initializeGenomicElement(g2, base, base + in_length - 1);
			base = base + in_length;
			
			ex_length = asInteger(rlnorm(1, log(50), log(2))) + 1;
			initializeGenomicElement(g1, base, base + ex_length - 1);
			base = base + ex_length;
		}
		while (runif(1) < 0.8);  // 20% probability of stopping
	}
	
	// final non-coding region
	nc_length = rdunif(1, 100, 5000);
	initializeGenomicElement(g3, base, base + nc_length - 1);
	
	// single recombination rate
	initializeRecombinationRate(1e-8);
}


//the code above writes the following code:
initializeMutationRate(1e-07);
initializeMutationType(1, 0.5, "f", 0);
initializeMutationType(2, 0.5, "f", 0);
initializeMutationType(3, 0.1, "g", -0.03, 0.2);
initializeMutationType(4, 0.8, "e", 0.1);
initializeGenomicElementType(1, c(m2, m3, m4), c(2, 8, 0.1));
initializeGenomicElementType(2, c(m1, m3), c(9, 1));
initializeGenomicElementType(3, m1, 1);
initializeGenomicElement(g3, 0, 4684);
initializeGenomicElement(g1, 4685, 4708);
initializeGenomicElement(g2, 4709, 4830);
initializeGenomicElement(g1, 4831, 4958);
initializeGenomicElement(g3, 4959, 9094);
initializeGenomicElement(g1, 9095, 9208);
initializeGenomicElement(g2, 9209, 9267);
initializeGenomicElement(g1, 9268, 9331);
initializeGenomicElement(g3, 9332, 12775);


1 { sim.addSubpop("p1", 5000); }
10000 { sim.simulationFinished(); }